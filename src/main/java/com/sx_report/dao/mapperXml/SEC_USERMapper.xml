<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sx_report.dao.mapper.SEC_USERMapper">
	<resultMap id="BaseResultMap" type="com.sx_report.model.SEC_USER">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Oct 14 
			11:14:38 CST 2016. -->
		<result column="SID" jdbcType="DECIMAL" property="sid" />
		<result column="ACCOUNTNAME" jdbcType="CHAR" property="accountname" />
		<result column="PASSWORD" jdbcType="VARCHAR" property="password" />
		<result column="SIDPARENT" jdbcType="DECIMAL" property="sidparent" />
		<result column="CONFIGID" jdbcType="DECIMAL" property="configid" />
		<result column="DEPTTYPE" jdbcType="DECIMAL" property="depttype" />
		<result column="FLAGS" jdbcType="DECIMAL" property="flags" />
		<result column="NAME" jdbcType="VARCHAR" property="name" />
		<result column="ADDRESS" jdbcType="VARCHAR" property="address" />
		<result column="EMAILADDRESS" jdbcType="VARCHAR" property="emailaddress" />
		<result column="TELEPHONE" jdbcType="VARCHAR" property="telephone" />
		<result column="MOBILE" jdbcType="VARCHAR" property="mobile" />

	</resultMap>
	 <select id="getDefineInfo" resultType="java.util.Map" parameterType="java.lang.String" statementType="STATEMENT">
    select 
        ${columns}
    from ${tableName}
        where ${condation}
  </select>
	    <select id="getDepartInfoOld" parameterType="map" resultType="java.util.HashMap">
    	
		select ss.current_state,su.depart_level,su.*ã€€from plan_project_mng ss ,sec_user su where ss.project_depart=#{sid,jdbcType=DECIMAL} and ss.parent_pro_id=#{parentProId,jdbcType=DECIMAL} and su.sid= ss.project_depart
		union all 
		select null  ,null ,t.* from sec_user t where  t.sidparent=#{sid,jdbcType=DECIMAL} and t.is_direct_depart=1
    </select>
	<select id="findChildStore" parameterType="map" resultType="java.util.HashMap">
		select u.*,b.* from sec_user u,(
		select c.CURRENT_STATE as STATEIDS,c.*
		from plan_project_mng_childlib c
		where
		<choose>
			<when test="departlevel ==2">
				c.project_depart=#{sid,jdbcType=DECIMAL} and
				c.parent_pro_id = #{parentProId,jdbcType=DECIMAL}

			</when>
			<otherwise>
				c.project_depart in (
					select su.sid from sec_user su where
				su.flags=1 and
				su.sid
				&lt;>#{sid,jdbcType=DECIMAL} start
				with
				su.sid=
				#{sid,jdbcType=DECIMAL}
				connect by prior su.sid=su.sidparent
				) and
				c.parent_pro_id = #{parentProId,jdbcType=DECIMAL}
			</otherwise>
		</choose>
		) b
		where u.sid=b.PROJECT_DEPART
	</select>
	<select id="findMajorStore" parameterType="map" resultType="java.util.HashMap">
		select p.*,p.CURRENT_STATE as STATEIDS from sec_user u ,(
		select * from
		plan_project_mng
		ss where
		ss.PROJECT_ID in (
		select
		d.child_library_id
		from
		PLAN_PROJECT_MAP_DEPART d where
		d.THIS_LIBRARY_ID=#{parentProId,jdbcType=DECIMAL} and
		<choose>
			<when test="departlevel != 2">
				d.dist_id in (
				select su.sid from sec_user su where
				su.flags=1 and
				su.sid
				&lt;>#{sid,jdbcType=DECIMAL} start
				with
				su.sid=
				#{sid,jdbcType=DECIMAL}
				connect by prior su.sid=su.sidparent
				)
			</when>
			<otherwise>
				d.dist_id= #{sid,jdbcType=DECIMAL}
			</otherwise>
		</choose>
		))
		p
		where
		u.sid=p.PROJECT_DEPART
	</select>
	<select id="find" resultMap="BaseResultMap">
		select * from SEC_USER t
	</select>
	<select id="isSummeryDepart" parameterType="map" resultType="java.util.HashMap">
		select count(su.is_summery_depart) as num from sec_user su where
		su.flags=1 and
		su.sid &lt;> #{sid,jdbcType=DECIMAL} start with su.sid=
		#{sid,jdbcType=DECIMAL} connect by prior su.sid=su.sidparent
		and
		su.is_summery_depart=1
	</select>
	<select id="getChildDepartInfo" parameterType="map"
		resultType="java.util.HashMap">
		select * from sec_user u ,(
		select * from
		plan_project_mng_childlib ss where
		ss.project_depart=#{sid,jdbcType=DECIMAL} and ss.parent_pro_id in (
		#{parentProId,jdbcType=DECIMAL})) p
		where u.sid=p.PROJECT_DEPART
	</select>
	<select id="getDepartInfo" parameterType="map" resultType="java.util.HashMap">
		select p.*,u.* from sec_user u, (
		select
		c.current_state,c.project_depart from plan_project_mng_childlib c,
		PLAN_PROJECT_MAP_DEPART d where c.project_id=d.child_library_id and
		c.project_depart=d.dist_id and d.flags=2
		and
		d.this_library_id=#{parentProId,jdbcType=DECIMAL} and
		d.dist_id=#{sid,jdbcType=DECIMAL}
		union all
		select
		m.current_state,m.project_depart from plan_project_mng m where
		m.parent_pro_id=#{parentProId,jdbcType=DECIMAL} and
		m.project_depart=#{sid,jdbcType=DECIMAL} ) p
		where
		p.project_depart=u.sid
		union all
		select null ,null ,t.* from sec_user t
		where
		t.sidparent=#{sid,jdbcType=DECIMAL} and t.is_direct_depart=1
	</select>

	<select id="findPlanStateIds" parameterType="map" resultType="java.util.HashMap">
		select * from (
		select t1.current_state as
		stateIds,suser.is_direct_depart,t1.project_depart
		from plan_project_mng
		t1 ,(
		select su.sid,su.is_direct_depart from sec_user su where
		su.flags=1
		<if test="departlevel !=2 ">
			and su.sid &lt;>#{sid,jdbcType=DECIMAL}
		</if>
		and su.is_plan_depart=1 start with su.sid= #{sid,jdbcType=DECIMAL}
		connect by prior su.sid=su.sidparent
		) suser where t1.project_depart in
		suser.sid
		and t1.parent_pro_id=#{parentProId,jdbcType=DECIMAL} )
	</select>
	<select id="findSummaryStateIds" parameterType="map"
		resultType="java.util.HashMap">
		select * from (
		select t1.current_state as
		stateIds,suser.is_direct_depart,t1.project_depart
		from plan_project_mng
		t1 ,(
		select su.sid,su.is_direct_depart from sec_user su where
		su.flags=1 and
		su.sid &lt;>#{sid,jdbcType=DECIMAL} and
		su.is_summery_depart=1 start
		with su.sid= #{sid,jdbcType=DECIMAL}
		connect by prior su.sid=su.sidparent
		) suser where t1.project_depart in
		suser.sid
		and t1.parent_pro_id=#{parentProId,jdbcType=DECIMAL} )
	</select>
	<insert id="insert" parameterType="com.sx_report.model.SEC_USER">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Oct 14 
			11:14:38 CST 2016. -->
		insert into SEC_USER (SID, ACCOUNTNAME, PASSWORD,
		SIDPARENT, CONFIGID,
		DEPTTYPE,
		FLAGS, NAME, ADDRESS,
		EMAILADDRESS, TELEPHONE, MOBILE)
		values
		(#{sid,jdbcType=DECIMAL}, #{accountname,jdbcType=CHAR},
		#{password,jdbcType=VARCHAR},
		#{sidparent,jdbcType=DECIMAL},
		#{configid,jdbcType=DECIMAL}, #{depttype,jdbcType=DECIMAL},
		#{flags,jdbcType=DECIMAL}, #{name,jdbcType=VARCHAR},
		#{address,jdbcType=VARCHAR},
		#{emailaddress,jdbcType=VARCHAR},
		#{telephone,jdbcType=VARCHAR}, #{mobile,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.sx_report.model.SEC_USER">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Oct 14 
			11:14:38 CST 2016. -->
		insert into SEC_USER
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="sid != null">
				SID,
			</if>
			<if test="accountname != null">
				ACCOUNTNAME,
			</if>
			<if test="password != null">
				PASSWORD,
			</if>
			<if test="sidparent != null">
				SIDPARENT,
			</if>
			<if test="configid != null">
				CONFIGID,
			</if>
			<if test="depttype != null">
				DEPTTYPE,
			</if>
			<if test="flags != null">
				FLAGS,
			</if>
			<if test="name != null">
				NAME,
			</if>
			<if test="address != null">
				ADDRESS,
			</if>
			<if test="emailaddress != null">
				EMAILADDRESS,
			</if>
			<if test="telephone != null">
				TELEPHONE,
			</if>
			<if test="mobile != null">
				MOBILE,
			</if>
			<if test="ipaddressrange != null">
				IPADDRESSRANGE,
			</if>
			<if test="roles != null">
				ROLES,
			</if>
			<if test="confirm != null">
				CONFIRM,
			</if>
			<if test="serialnumber != null">
				SERIALNUMBER,
			</if>
			<if test="userLoginNum != null">
				USER_LOGIN_NUM,
			</if>
			<if test="userPasswordChangedTime != null">
				USER_PASSWORD_CHANGED_TIME,
			</if>
			<if test="isPlanDepart != null">
				IS_PLAN_DEPART,
			</if>
			<if test="isSummeryDepart != null">
				IS_SUMMERY_DEPART,
			</if>
			<if test="depttypeExt != null">
				DEPTTYPE_EXT,
			</if>
			<if test="partId != null">
				PART_ID,
			</if>
			<if test="pmsDepart != null">
				PMS_DEPART,
			</if>
			<if test="dataAuthorize != null">
				DATA_AUTHORIZE,
			</if>
			<if test="accessiblePartList != null">
				ACCESSIBLE_PART_LIST,
			</if>
			<if test="userid4a != null">
				USERID_4A,
			</if>
			<if test="range != null">
				RANGE,
			</if>
			<if test="gisDepartId != null">
				GIS_DEPART_ID,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="sid != null">
				#{sid,jdbcType=DECIMAL},
			</if>
			<if test="accountname != null">
				#{accountname,jdbcType=CHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="sidparent != null">
				#{sidparent,jdbcType=DECIMAL},
			</if>
			<if test="configid != null">
				#{configid,jdbcType=DECIMAL},
			</if>
			<if test="depttype != null">
				#{depttype,jdbcType=DECIMAL},
			</if>
			<if test="flags != null">
				#{flags,jdbcType=DECIMAL},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="address != null">
				#{address,jdbcType=VARCHAR},
			</if>
			<if test="emailaddress != null">
				#{emailaddress,jdbcType=VARCHAR},
			</if>
			<if test="telephone != null">
				#{telephone,jdbcType=VARCHAR},
			</if>
			<if test="mobile != null">
				#{mobile,jdbcType=VARCHAR},
			</if>
			<if test="ipaddressrange != null">
				#{ipaddressrange,jdbcType=OTHER},
			</if>
			<if test="roles != null">
				#{roles,jdbcType=OTHER},
			</if>
			<if test="confirm != null">
				#{confirm,jdbcType=VARCHAR},
			</if>
			<if test="serialnumber != null">
				#{serialnumber,jdbcType=VARCHAR},
			</if>
			<if test="userLoginNum != null">
				#{userLoginNum,jdbcType=DECIMAL},
			</if>
			<if test="userPasswordChangedTime != null">
				#{userPasswordChangedTime,jdbcType=TIMESTAMP},
			</if>
			<if test="isPlanDepart != null">
				#{isPlanDepart,jdbcType=DECIMAL},
			</if>
			<if test="isSummeryDepart != null">
				#{isSummeryDepart,jdbcType=DECIMAL},
			</if>
			<if test="depttypeExt != null">
				#{depttypeExt,jdbcType=DECIMAL},
			</if>
			<if test="partId != null">
				#{partId,jdbcType=DECIMAL},
			</if>
			<if test="pmsDepart != null">
				#{pmsDepart,jdbcType=VARCHAR},
			</if>
			<if test="dataAuthorize != null">
				#{dataAuthorize,jdbcType=VARCHAR},
			</if>
			<if test="accessiblePartList != null">
				#{accessiblePartList,jdbcType=VARCHAR},
			</if>
			<if test="userid4a != null">
				#{userid4a,jdbcType=VARCHAR},
			</if>
			<if test="range != null">
				#{range,jdbcType=OTHER},
			</if>
			<if test="gisDepartId != null">
				#{gisDepartId,jdbcType=DECIMAL},
			</if>
		</trim>
	</insert>
</mapper>